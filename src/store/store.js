import Vue from "vue";
import Vuex from "vuex";
import db from "@/db";
// import {doc,getDoc, getDocs,query,collection,orderBy} from "firebase/firestore"
// import VuexPersistence from 'vuex-persist'
import axios from "axios";
import { collection, query, getDocs,doc,getDoc } from "firebase/firestore";

Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    VUE_APP_HOST: "localhost:10004",
    VUE_APP_CERT:
      "2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434a7a434341637967417749424167495147514f4c774a475045436e2b3273413377467971416a414b42676771686b6a4f50515144416a41784d5238770a485159445651514b45785a73626d5167595856306232646c626d56795958526c5a43426a5a584a304d51347744415944565151444577566862476c6a5a5441650a467730794d7a41794d6a49794d6a457a4e546c61467730794e4441304d5467794d6a457a4e546c614d444578487a416442674e5642416f54466d78755a4342680a645852765a3256755a584a686447566b49474e6c636e5178446a414d42674e5642414d544257467361574e6c4d466b77457759484b6f5a497a6a3043415159490a4b6f5a497a6a304441516344516741457579706139626e494e747878442f5635415451506b357849676d57677a49477831354f4135587a744c4b67666d5442370a7132756b746a4b51686269583071707651694770586b306663624c51626636556255386f414b4f4278544342776a414f42674e56485138424166384542414d430a41715177457759445652306c42417777436759494b775942425155484177457744775944565230544151482f42415577417745422f7a416442674e56485134450a466751556634473042304f317846414c63344c6773343657474c454c7a794d77617759445652305242475177596f4946595778705932574343577876593246730a6147397a644949465957787059325743446e4276624746794c5734324c57467361574e6c67675231626d6c3467677031626d6c346347466a61325630676764690a64575a6a623235756877522f4141414268784141414141414141414141414141414141414141414268775373464141454d416f4743437147534d343942414d430a41306b414d455943495144454b7a594a44784c4d6c514f6c4d4e65365131672b4a693047396d7434534e4d563430484535304e6772774968414c456b585853510a7763586c54394c7439377153796b305150635a726a33342b76724743434d5944737475680a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a",
    VUE_APP_MACAROON:
      "0201036c6e6402f801030a10b7488182e073dec3cffd7a7a1ff3c5a21201301a160a0761646472657373120472656164120577726974651a130a04696e666f120472656164120577726974651a170a08696e766f69636573120472656164120577726974651a210a086d616361726f6f6e120867656e6572617465120472656164120577726974651a160a076d657373616765120472656164120577726974651a170a086f6666636861696e120472656164120577726974651a160a076f6e636861696e120472656164120577726974651a140a057065657273120472656164120577726974651a180a067369676e6572120867656e657261746512047265616400000620539827b803f06819a9dd5167216b6756f6aa7b7ce011b92c9073983ff7c753a6",
    OTHER_VUE_APP_HOST: "localhost:10005",
    OTHER_VUE_APP_CERT:
      "2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949434844434341634b67417749424167495142367a5344454252366f514b332f5031634636704a6a414b42676771686b6a4f50515144416a41764d5238770a485159445651514b45785a73626d5167595856306232646c626d56795958526c5a43426a5a584a304d517777436759445651514445774e69623249774868634e0a4d6a4d774d6a49794d6a49784d7a55345768634e4d6a51774e4445344d6a49784d7a5534576a41764d523877485159445651514b45785a73626d5167595856300a6232646c626d56795958526c5a43426a5a584a304d517777436759445651514445774e69623249775754415442676371686b6a4f5051494242676771686b6a4f0a50514d4242774e434141526364784e756649526b355652445452534675527734686735655378415655626131354878747a526d4575725661317831714a6d442f0a2f70696342724763354e7247734b394847704830595a4f465a43746a7830326a6f34472f4d4947384d41344741315564447745422f77514541774943704441540a42674e56485355454444414b4267677242674546425163444154415042674e5648524d4241663845425441444151482f4d4230474131556444675157424253630a4f65592f6f513875326c3453625444394779644570306571766a426c42674e5648524545586a426367674e6962324b4343577876593246736147397a644949440a596d39696767787762327868636931754e69316962324b434248567561586943436e56756158687759574e725a58534342324a315a6d4e76626d3648424838410a41414748454141414141414141414141414141414141414141414748424b775541414977436759494b6f5a497a6a3045417749445341417752514968414c73750a42524a6a46616150396476347342504c64454c6d4f7a6e59733456306f344e5841486453727666304169415a46664b3641414b46304c37584250767a737872720a6d6e76327a646471744a7a3355566e7173597a6439513d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a",
    OTHER_VUE_APP_MACAROON:
      "0201036c6e6402f801030a10c8435937d8133741dd0f06f0751a138f1201301a160a0761646472657373120472656164120577726974651a130a04696e666f120472656164120577726974651a170a08696e766f69636573120472656164120577726974651a210a086d616361726f6f6e120867656e6572617465120472656164120577726974651a160a076d657373616765120472656164120577726974651a170a086f6666636861696e120472656164120577726974651a160a076f6e636861696e120472656164120577726974651a140a057065657273120472656164120577726974651a180a067369676e6572120867656e6572617465120472656164000006203a53ffc6fc9588af7ac16e61c2aa7b87b5042087eadce7dba3ed0d3e4ceec051",
    user: {
      loggedIn: false,
      data: null,
      usertype: null,
    },
    loading: false,
    balance: "",
    users: [],
    filteredUsers: [],
    transactions:[]
  },

  getters: {
    user(state) {
      return state.user;
    },
    auth(state) {
      return state.user;
    },
  },

  mutations: {
    SET_LOGGED_IN(state, value) {
      state.user.loggedIn = value;
    },
    SET_USER(state, data) {
      state.user.data = data;
    },

    fetchBalance(state) {
      state.loading = true;
      const node = {
        host: JSON.parse(localStorage.getItem("userData")).displayName ==='Kal El'? state.VUE_APP_HOST:state.OTHER_VUE_APP_HOST,
        cert: JSON.parse(localStorage.getItem("userData")).displayName ==='Kal El'? state.VUE_APP_CERT:state.OTHER_VUE_APP_CERT,
        macaroon: JSON.parse(localStorage.getItem("userData")).displayName ==='Kal El'? state.VUE_APP_MACAROON:state.OTHER_VUE_APP_MACAROON
      };
      axios({
        method: "POST",
        url: "http://localhost:5000/balance",
        data: node,
      })
        .then((response) => {
          console.log(response);
          state.loading = false;
          state.balance = Object.keys(response.data).length == 0 ?"0":response.data.balance;
        })
        .catch((error) => {
          console.log(error);
        });
    },

    async fetchUsers(state) {
      state.loading = true;
      let array = [];
      const q = query(collection(db, "users"));
      const querySnapshot = await getDocs(q);
      querySnapshot.forEach((doc) => {
        array.push(doc.data());
      });
      state.users = array;
      state.filteredUsers = array.filter((user)=>user.uid !== JSON.parse(localStorage.getItem("userData")).uid);
      state.loading = false;
    },

    searchUsers(state, searchTerm) {
      let value = searchTerm.toLowerCase().trim();
      if (!value) {
        state.filteredUsers = state.users;
      }

      state.filteredUsers = state.users.filter(
        (user) => user.name.toLowerCase().indexOf(value) > -1
      );
    },

    fetchTransactions(state){
      state.loading = true
      getDoc(doc(db,"users",JSON.parse(localStorage.getItem('userData')).uid)).then((response)=>{
        state.transactions = response.data().transactions.reverse()
        state.loading = false
      })
    }
  },


  actions: {
    fetchUser: (context, user) => {
      context.commit("SET_LOGGED_IN", user !== null);
      if (user) {
        context.commit("SET_USER", {
          uid: user.uid,
          displayName: user.displayName,
          email: user.email,
          photoURL: user.photoURL,
        });

        const userPayLoad = {
          uid: user.uid,
          displayName: user.displayName,
          email: user.email,
          photoURL: user.photoURL,
        };

        localStorage.setItem("userData", JSON.stringify(userPayLoad));
      } else {
        context.commit("SET_USER", null);
      }
    },

    fetchBalance: (context, value) => {
      context.commit("fetchBalance", value);
    },

    fetchUsers: (context, value) => {
      context.commit("fetchUsers", value);
    },
    searchUsers: (context, value) => {
      context.commit("searchUsers", value);
    },

    fetchTransactions:(context,value) =>{
      context.commit("fetchTransactions", value);
    }
  },
});
